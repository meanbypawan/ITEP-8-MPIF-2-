MySQL :-
  SQL [Structure Query Language]:-
   1. DDL [Data Definition Language]
      |--create, drop, alter, truncate
   2. DML [Data Manipulation Language]
      |--insert, delete, update
   3. DRL [Data Reteriving Language] 
      |--select
   4. TCL [Transaction Control Language]
      |--commit , rollback
   5. DCL [Data Control Language]
      |--grant, revoke
----------------------------------------------------
     Database------>Table------->Record/Row/Tuple
  
  Opening mysql shell
    mysql -uroot -p
  
  Listing Database
    show databases                    
  How to create database in mysql
    1. create database companydb
       create database if not exists companydb
  
  Setting current database
    use databaseName
  
  Datatypes :-
    int, float, char, varchar, text, date, blob, clob, tinyint, bigint...
  Creating table 
    employee(name,salary,gender,age,contact) ---> Schema
    
  Constraint :-
    Primary key
    Auto increment
    Not null
    Unique Key
    Foreign key
    default value
    Check
    -------------------------------------  
    create table employee(
      name varchar(100) not null,
      salary int,
      gender varchar(6) not null,
      age int(3) check(age >=18 ),
      contact int unique key,
      id int primary key auto_increment)       
   --------------------------------------------
     primary key v/s unique key  *****
   -------------------------------------------
   desc employee :-- Describing structure
   describe employee  
   
   Ajib sa command
   show create table employee
   
   Dropping constraing
   alter table employee drop constraint constrain_name;
   
   Adding constraint
   alter table employee add constraint employee_chk_age check(age>=18)
   
   //alter table employee modify constraint employee_chk_age check(age>=20) :- not possible
   
   alter table employee modify column contact varchar(10) unique key
   --------------------------------------------------------------------------
   Adding new column in existing structure/table
   drop, add, modify
   
   alter table employee add address varchar(100)
   alter table employee modify address varchar(100) default 'Indore'
   alter table employee drop address
   -------------------------------------------------------------------------
   
   Inserting Record
   
   insert into employee values('cheeku',90000,'male',21,9009111222,1)
   insert into employee values('peeku',95000,'male',24,9009111333,null)
   insert into employee values('lili',89000,'female',26,9009111444,null)
   
   alter table employee add address varchar(100) default 'Indore'
   insert into employee values('leesha',78000,'female',22,9009111666,null,'null')
   
   *****
   insert into employee(name,age,gender,contact) values('neesha',29,'female','9009111777') 
   ------------------------------------------------------------------
   selecting record
   
   select * from employee; // Complete selection
   select id,name,salary,age from employee
   ------------------------------------------
   Filter :- where
   op:- >,<,>=,<=,=,and,or,like,between,in..
   select id,name,salary,age from employee where age >=60000
   
   insert into employee(name,age,salary,gender,contact,skill)
   values('rishika',19,95000,'female',9439494494,'reactjs');
   
   wild card character :- %, _[underscore]
   % :- zero or any number of occurance
   _ :- fixed number and position
   
   select * from employee where name like '%u'
   select * from employee where name like '%ee%';
   -----------------------------------------------
   sort :- order by
   select * from employee order by salary
   select * from employee order by salary desc
   select * from employee where salary>=60000 order by salary desc
   ---------------------------------------------------------------
   max(), min(), count(), sum(), avg()....
   
   select * from employee where salary = (select max(salary) from employee)
                                           
   select * from employee
   where salary = (select max(salary) from employee
   where salary !=(select max(salary) from employee));
   ----------------------------------------------------
   select * from employee
   where salary = (select max(salary) from employee
   where salary <(select max(salary) from employee
   where salary <(select max(salary) from employee))); 
                                           
   
   select * from employee where salary not in(95000)
   select * from employee where salary not in(select max(salary) from employee)
   
   select * from employee where salary not in(
   select max(salary) from employee);
   
   select sum(salary) from employee;
-------------------------------------------------------------------------------------
create table department(
  id int primary key auto_increment,
  departmentName varchar(100) not null);

insert into department (departmentName) values ('sales'),('hr'),('it'),('testing'),('research and development')     
---------------------------------------------------------------------
Tabel :- employee    A
Table :- department  B  

Mapping Cardinalities/Relationship
 a. one to many :-
    If record of Table A is associated with multiple record of Table B.
    e.g :- Category hasMany Products
           Department hasMany Employee
           On Batch hasMany Students.
           
 b. Many to Many
    If a record of Table is associated with multiple record of Table B and
    a record of Table B is associated with mulitple record of Table A.
    
    Note:- Third[supporting table] is used to represent Many to Many
    
    User, Cart, Product
    user hasone Cart
    Cart hasMany Product  through CartItems[cartId, productId]
    Product bleongsToMany Cart through CartItems
    
 c. one to one :- if a record of Table A is associated with one record of Table B only.
    User hasOne Cart
    Cart belongsTo User

 How to represent the relationship:-
   Primary key, Foreign key
--------------------------------------------
alter table employee add(departmentId int,
foreign key(departmentId) references department(id))
-------------------------------------------------------
join :- it is used to fetch data from multiple tables.
 1. inner join
 2. left outer join
 3. right outer join
 4. self join
 5. cross join
 
select employee.id,employee.name,employee.salary,department.departmentName from
employee inner join department on employee.departmentId = department.id


select employee.id,employee.name,employee.salary,department.departmentName from
employee left outer join department on employee.departmentId = department.id
------------------------------------------------------------------------------------
employee
city
state
country

employee belongst to City ,   City hasMany Employee
City belongsTo State      ,   State hasMany Cities
State belongsTo Country   ,   Country hasMany States

create table country(
  id int primary key auto_increment,
  countryName varchar(100))

create table state(
 id int primary key auto_increment,
 stateName varchar(100),
 countryId int,
 foreign key(countryId) references country(id))  
  
create table city(
  id int primary key auto_increment,
  cityName varchar(100),
  stateId int,
  foreign key(stateId) references state(id))
------------------------------------------------
insert into country(countryName) values('India'),('Russia');
insert into state(stateName,countryId) values('MP',1),
('MH',1),('UP',1),('GJ',1),('Masco',2)

insert into city(cityName,stateId) values('Indore',1),('Jabalour',1),('Bhopal',1),
('Pune',2),('Mumbai',2),('Nasik',2),('Agra',3),('Prayagraj',3),('Ahamdabad',4),('Vadodra',4),
('Surat',4),('Gandhinagar',4),('Masco city 1',5),('Masco city 2',5)


alter table employee add(cityId int,
foreign key(cityId) references city(id) on delete cascade)

select employee.id,employee.name,city.cityName,state.stateName,country.countryName,department.departmentName
from employee inner join city on employee.cityId = city.id
inner join state on city.stateId = state.id
inner join country on state.countryId = country.id
inner join department on department.id = employee.departmentId 
 
 
















   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
